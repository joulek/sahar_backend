const BaseController = require("../HUB/BaseController");
const operateurModel = require("../models/operateurModel");
const operateurInstance = new operateurModel(); // n√©cessaire pour `getAll`

module.exports = class operateurController extends BaseController {
  constructor() {
    super(operateurInstance);
  }
  // ‚úÖ Supprimer op√©rateur + utilisateur li√©
  deleteOperateur = async (req, res) => {
    try {
      const { id } = req.params;

      const response = await this.model.deleteOperateur(id);

      return res.status(200).json({
        message: response.message,
      });
    } catch (error) {
      console.error("‚ùå Erreur dans deleteOperateur :", error.message);
      return res.status(500).json({ error: error.message });
    }
  };

  // ‚úÖ Cr√©er op√©rateur + utilisateur
  createOperateur = async (req, res) => {
  try {
    const data = req.body;
    console.log("üì• Donn√©es re√ßues :", data);

    const response = await this.model.createOperateur(data);

    return res.status(201).json({
      message: response.message,
      operateurId: response.operateurId,
      utilisateurId: response.utilisateurId,
    });
  } catch (error) {
    console.error("‚ùå Erreur dans createOperateur :", error.message);

    // ‚úÖ G√©rer le cas du CIN d√©j√† existant (message explicite pour le frontend)
    if (error.message.toLowerCase().includes("cin")) {
      return res.status(400).json({
        error: error.message,
      });
    }

    // ‚ùå Erreur g√©n√©rique (base de donn√©es, connexion, etc.)
    return res.status(500).json({
      error: "Erreur interne lors de la cr√©ation de l'op√©rateur.",
    });
  }
};

  // ‚úÖ Mettre √† jour op√©rateur + utilisateur
updateOperateur = async (req, res) => {
  try {
    const data = req.body;
    console.log("üì¶ Donn√©es re√ßues pour update :", data);

    const response = await this.model.updateOperateur(data);

    return res.status(200).json({
      message: response.message,
      operateurId: response.operateurId,
      utilisateurId: response.utilisateurId,
    });
  } catch (error) {
    console.error("‚ùå Erreur dans updateOperateur :", error.message);

    // üîç Erreur fonctionnelle : CIN d√©j√† utilis√© ou probl√®me li√© au CIN
    if (error.message.toLowerCase().includes("cin")) {
      return res.status(400).json({
        error: error.message,           // ex. ¬´ ‚ùå Ce CIN est d√©j√† utilis√© par un autre utilisateur. ¬ª
      });
    }

    // üü• Erreur g√©n√©rique (SQL, r√©seau, etc.)
    return res.status(500).json({
      error: "Erreur interne lors de la mise √† jour de l'op√©rateur.",
    });
  }
};



  // ‚úÖ Liste tous les op√©rateurs avec labels machine/proc√©d√©
  getAll = async (req, res) => {
    try {
      const operateurs = await operateurInstance.getAllOperateurs();
      return res.status(200).json(operateurs);
    } catch (error) {
      console.error("‚ùå Erreur dans getAll :", error.message);
      return res.status(500).json({ error: "Erreur lors de la r√©cup√©ration des op√©rateurs." });
    }
  };
  // üîÅ Retourner id_operateur √† partir de id_utilisateur (via CIN)
getIdByUserId = async (req, res) => {
  try {
    const { id } = req.params;
    const operateurId = await this.model.getOperateurIdByUserId(id);

    if (operateurId) {
      return res.status(200).json({ id: operateurId });
    } else {
      return res.status(404).json({ message: "Aucun op√©rateur trouv√© pour cet utilisateur." });
    }
  } catch (error) {
    console.error("‚ùå Erreur dans getIdByUserId :", error.message);
    return res.status(500).json({ error: "Erreur lors de la r√©cup√©ration de l'id op√©rateur." });
  }
};

};
